name: Build and Test UI Components

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build components
      run: npm run build
    
    - name: Run bundle analysis
      run: npm run analyze
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 30
    
    - name: Build Storybook
      run: npm run storybook:build
    
    - name: Deploy Storybook to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist/storybook

  semantic-release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for release
      run: npm run build
    
    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npx semantic-release

  publish-packages:
    runs-on: ubuntu-latest
    needs: semantic-release
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build packages
      run: npm run build
    
    - name: Publish to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Publish main package
        npm publish --access public
        
        # Publish sub-packages if they exist
        if [ -d "packages/core" ]; then
          cd packages/core && npm publish --access public
          cd ../..
        fi
        
        if [ -d "packages/atoms" ]; then
          cd packages/atoms && npm publish --access public
          cd ../..
        fi
        
        if [ -d "packages/molecules" ]; then
          cd packages/molecules && npm publish --access public
          cd ../..
        fi
        
        if [ -d "packages/applications" ]; then
          cd packages/applications && npm publish --access public
          cd ../..
        fi

  deploy-cdn:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/
    
    - name: Deploy to CDN
      env:
        CDN_API_KEY: ${{ secrets.CDN_API_KEY }}
        CDN_ENDPOINT: ${{ secrets.CDN_ENDPOINT }}
      run: |
        # Upload to CDN (example using curl)
        for file in dist/*.js dist/*.css; do
          if [ -f "$file" ]; then
            curl -X PUT \
              -H "Authorization: Bearer $CDN_API_KEY" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "$CDN_ENDPOINT/tamyla-ui/$(basename $file)"
          fi
        done
